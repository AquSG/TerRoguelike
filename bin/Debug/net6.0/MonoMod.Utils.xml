<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoMod.Utils</name>
    </assembly>
    <members>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
                Reserved to be used by the compiler for tracking metadata.
                This class should not be used by developers in source code.
            </summary>
            <remarks>
                This definition is provided by the <i>IsExternalInit</i> NuGet package (https://www.nuget.org/packages/IsExternalInit).
                Please see https://github.com/manuelroemer/IsExternalInit for more information.
            </remarks>
        </member>
        <member name="T:MonoMod.Utils.Cil.CecilILGenerator">
            <summary>
            A variant of ILGenerator which uses Mono.Cecil under the hood.
            </summary>
        </member>
        <member name="P:MonoMod.Utils.Cil.CecilILGenerator.IL">
            <summary>
            The underlying Mono.Cecil.Cil.ILProcessor.
            </summary>
        </member>
        <member name="T:MonoMod.Utils.Cil.ILGeneratorShim">
            <summary>
            Abstract version of System.Reflection.Emit.ILGenerator. See <see cref="T:System.Reflection.Emit.ILGenerator"/> for proper documentation.
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Cil.ILGeneratorShim.GetProxy">
            <summary>
            Get a "real" ILGenerator for this ILGeneratorShim.
            </summary>
            <returns>A "real" ILGenerator.</returns>
        </member>
        <member name="M:MonoMod.Utils.Cil.ILGeneratorShim.GetProxyType``1">
            <summary>
            Get the proxy type for a given ILGeneratorShim type. The proxy type implements ILGenerator.
            </summary>
            <typeparam name="TShim">The ILGeneratorShim type.</typeparam>
            <returns>The "real" ILGenerator type.</returns>
        </member>
        <member name="M:MonoMod.Utils.Cil.ILGeneratorShim.GetProxyType(System.Type)">
            <summary>
            Get the proxy type for a given ILGeneratorShim type. The proxy type implements ILGenerator.
            </summary>
            <param name="tShim">The ILGeneratorShim type.</param>
            <returns>The "real" ILGenerator type.</returns>
        </member>
        <member name="P:MonoMod.Utils.Cil.ILGeneratorShim.GenericProxyType">
            <summary>
            Get the (open) generic proxy type implementing ILGenerator.
            </summary>
            <returns>The "real" ILGenerator type, non-generic.</returns>
        </member>
        <member name="T:MonoMod.Utils.DMDGenerator`1">
            <summary>
            A DynamicMethodDefinition "generator", responsible for generating a runtime MethodInfo from a DMD MethodDefinition.
            </summary>
            <typeparam name="TSelf">The derived type.</typeparam>
        </member>
        <member name="T:MonoMod.Utils.DMDCecilGenerator">
            <summary>
            A DMDGenerator implementation using Mono.Cecil to build an in-memory assembly.
            </summary>
        </member>
        <member name="M:MonoMod.Utils.DynDll.OpenLibrary(System.String)">
            <summary>
            Open a given library and get its handle.
            </summary>
            <remarks>
            Passing <see langword="null"/> to <paramref name="name"/> will get the entrypoint module's handle.
            </remarks>
            <param name="name">The library name.</param>
            <returns>The library handle.</returns>
        </member>
        <member name="M:MonoMod.Utils.DynDll.TryOpenLibrary(System.String,System.IntPtr@)">
            <summary>
            Try to open a given library and get its handle.
            </summary>
            <remarks>
            Passing <see langword="null"/> to <paramref name="name"/> will get the entrypoint module's handle.
            </remarks>
            <param name="name">The library name.</param>
            <param name="libraryPtr">The library handle.</param>
            <returns><see langword="true"/> if the library was opened successfully; <see langword="false"/> if an error ocurred.</returns>
        </member>
        <member name="M:MonoMod.Utils.DynDll.CloseLibrary(System.IntPtr)">
            <summary>
            Release a library handle obtained from <see cref="M:MonoMod.Utils.DynDll.OpenLibrary(System.String)"/> or <see cref="M:MonoMod.Utils.DynDll.TryOpenLibrary(System.String,System.IntPtr@)"/>.
            </summary>
            <param name="lib">The library handle.</param>
        </member>
        <member name="M:MonoMod.Utils.DynDll.TryCloseLibrary(System.IntPtr)">
            <summary>
            Try to close a library handle obtained from <see cref="M:MonoMod.Utils.DynDll.OpenLibrary(System.String)"/> or <see cref="M:MonoMod.Utils.DynDll.TryOpenLibrary(System.String,System.IntPtr@)"/>.
            </summary>
            <param name="lib">The library handle.</param>
            <returns><see langword="true"/> if the library was closed successfully; <see langword="false"/> if an error ocurred.</returns>
        </member>
        <member name="M:MonoMod.Utils.DynDll.GetExport(System.IntPtr,System.String)">
            <summary>
            Get a pointer to an export from the given library.
            </summary>
            <param name="libraryPtr">The library handle.</param>
            <param name="name">The function name.</param>
            <returns>The function pointer.</returns>
        </member>
        <member name="M:MonoMod.Utils.DynDll.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
            <summary>
            Get a pointer to an export from the given library.
            </summary>
            <param name="libraryPtr">The library handle.</param>
            <param name="name">The function name.</param>
            <param name="functionPtr">The export pointer, or null if it wasn't found.</param>
            <returns><see langword="true"/> if the export was obtained successfully; <see langword="false"/> if an error ocurred.</returns>
        </member>
        <member name="T:MonoMod.Utils.Extensions">
            <summary>
            Collection of extensions used by MonoMod and other projects.
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.SafeResolve(Mono.Cecil.TypeReference)">
            <summary>
            Safely resolve a reference, silently discarding any exceptions.
            </summary>
            <param name="r">The reference to resolve.</param>
            <returns>The resolved definition or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.SafeResolve(Mono.Cecil.FieldReference)">
            <summary>
            Safely resolve a reference, silently discarding any exceptions.
            </summary>
            <param name="r">The reference to resolve.</param>
            <returns>The resolved definition or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.SafeResolve(Mono.Cecil.MethodReference)">
            <summary>
            Safely resolve a reference, silently discarding any exceptions.
            </summary>
            <param name="r">The reference to resolve.</param>
            <returns>The resolved definition or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.SafeResolve(Mono.Cecil.PropertyReference)">
            <summary>
            Safely resolve a reference, silently discarding any exceptions.
            </summary>
            <param name="r">The reference to resolve.</param>
            <returns>The resolved definition or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetCustomAttribute(Mono.Cecil.ICustomAttributeProvider,System.String)">
            <summary>
            Get a certain custom attribute from an attribute provider.
            </summary>
            <param name="cap">The attribute provider.</param>
            <param name="attribute">The custom attribute name.</param>
            <returns>The first matching custom attribute, or null if no matching attribute has been found.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.HasCustomAttribute(Mono.Cecil.ICustomAttributeProvider,System.String)">
            <summary>
            Determine if an attribute provider has got a specific custom attribute.
            </summary>
            <param name="cap">The attribute provider.</param>
            <param name="attribute">The custom attribute name.</param>
            <returns>true if the attribute provider contains the given custom attribute, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetInt(Mono.Cecil.Cil.Instruction)">
            <summary>
            Get the integer value pushed onto the stack with this instruction.
            </summary>
            <param name="instr">The instruction to get the pushed integer value for.</param>
            <returns>The pushed integer value.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetIntOrNull(Mono.Cecil.Cil.Instruction)">
            <summary>
            Get the integer value pushed onto the stack with this instruction.
            </summary>
            <param name="instr">The instruction to get the pushed integer value for.</param>
            <returns>The pushed integer value or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.IsBaseMethodCall(Mono.Cecil.Cil.MethodBody,Mono.Cecil.MethodReference)">
            <summary>
            Determine if the method call is a base method call.
            </summary>
            <param name="body">The caller method body.</param>
            <param name="called">The called method.</param>
            <returns>True if the called method is a base method of the caller method, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.IsCallvirt(Mono.Cecil.MethodReference)">
            <summary>
            Determine if the given method can be preferably called using callvirt.
            </summary>
            <param name="method">The called method.</param>
            <returns>True if the called method can be called using callvirt, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.IsStruct(Mono.Cecil.TypeReference)">
            <summary>
            Determine if the given type is a struct (also known as "value type") or struct-alike (f.e. primitive).
            </summary>
            <param name="type">The type to check.</param>
            <returns>True if the type is a struct, primitive or similar, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.ToLongOp(Mono.Cecil.Cil.OpCode)">
            <summary>
            Get the long form opcode for any short form opcode.
            </summary>
            <param name="op">The short form opcode.</param>
            <returns>The long form opcode.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.ToShortOp(Mono.Cecil.Cil.OpCode)">
            <summary>
            Get the short form opcode for any long form opcode.
            </summary>
            <param name="op">The long form opcode.</param>
            <returns>The short form opcode.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.RecalculateILOffsets(Mono.Cecil.MethodDefinition)">
            <summary>
            Calculate updated instruction offsets. Required for certain manual fixes.
            </summary>
            <param name="method">The method to recalculate the IL instruction offsets for.</param>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FixShortLongOps(Mono.Cecil.MethodDefinition)">
            <summary>
            Fix (and optimize) any instructions which should use the long / short form opcodes instead.
            </summary>
            <param name="method">The method to apply the fixes to.</param>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Is(System.Reflection.MemberInfo,Mono.Cecil.MemberReference)">
            <summary>
            Check if the signatures of a given System.Reflection and Mono.Cecil member reference match.
            </summary>
            <param name="minfo">The System.Reflection member reference.</param>
            <param name="mref">The Mono.Cecil member reference.</param>
            <returns>True if both references share the same signature, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Is(Mono.Cecil.MemberReference,System.Reflection.MemberInfo)">
            <summary>
            Check if the signatures of a given System.Reflection and Mono.Cecil member reference match.
            </summary>
            <param name="mref">The Mono.Cecil member reference.</param>
            <param name="minfo">The System.Reflection member reference.</param>
            <returns>True if both references share the same signature, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.AddRange``1(Mono.Collections.Generic.Collection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            See <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.AddRange(System.Collections.IDictionary,System.Collections.IDictionary)">
            <summary>
            See <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            See <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.AddRange``2(System.Collections.Generic.Dictionary{``0,``1},System.Collections.Generic.Dictionary{``0,``1})">
            <summary>
            See <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.InsertRange``1(Mono.Collections.Generic.Collection{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            See <see cref="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})"/>
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.IsCompatible(System.Type,System.Type)">
            <summary>
            Determine if two types are compatible with each other (f.e. object with string, or enums with their underlying integer type).
            </summary>
            <param name="type">The first type.</param>
            <param name="other">The second type.</param>
            <returns>True if both types are compatible with each other, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.CreateDelegate``1(System.Reflection.MethodBase)">
            <summary>
            Creates a delegate of the specified type from this method.
            </summary>
            <param name="method">The method to create the delegate from.</param>
            <typeparam name="T">The type of the delegate to create.</typeparam>
            <returns>The delegate for this method.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.CreateDelegate``1(System.Reflection.MethodBase,System.Object)">
            <summary>
            Creates a delegate of the specified type with the specified target from this method.
            </summary>
            <param name="method">The method to create the delegate from.</param>
            <typeparam name="T">The type of the delegate to create.</typeparam>
            <param name="target">The object targeted by the delegate.</param>
            <returns>The delegate for this method.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.CreateDelegate(System.Reflection.MethodBase,System.Type)">
            <summary>
            Creates a delegate of the specified type from this method.
            </summary>
            <param name="method">The method to create the delegate from.</param>
            <param name="delegateType">The type of the delegate to create.</param>
            <returns>The delegate for this method.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.CreateDelegate(System.Reflection.MethodBase,System.Type,System.Object)">
            <summary>
            Creates a delegate of the specified type with the specified target from this method.
            </summary>
            <param name="method">The method to create the delegate from.</param>
            <param name="delegateType">The type of the delegate to create.</param>
            <param name="target">The object targeted by the delegate.</param>
            <returns>The delegate for this method.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindMethod(Mono.Cecil.TypeDefinition,System.String,System.Boolean)">
            <summary>
            Find a method for a given ID.
            </summary>
            <param name="type">The type to search in.</param>
            <param name="id">The method ID.</param>
            <param name="simple">Whether to perform a simple search pass as well or not.</param>
            <returns>The first matching method or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindMethodDeep(Mono.Cecil.TypeDefinition,System.String,System.Boolean)">
            <summary>
            Find a method for a given ID recursively (including the passed type's base types).
            </summary>
            <param name="type">The type to search in.</param>
            <param name="id">The method ID.</param>
            <param name="simple">Whether to perform a simple search pass as well or not.</param>
            <returns>The first matching method or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindMethod(System.Type,System.String,System.Boolean)">
            <summary>
            Find a method for a given ID.
            </summary>
            <param name="type">The type to search in.</param>
            <param name="id">The method ID.</param>
            <param name="simple">Whether to perform a simple search pass as well or not.</param>
            <returns>The first matching method or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindMethodDeep(System.Type,System.String,System.Boolean)">
            <summary>
            Find a method for a given ID recursively (including the passed type's base types).
            </summary>
            <param name="type">The type to search in.</param>
            <param name="id">The method ID.</param>
            <param name="simple">Whether to perform a simple search pass as well or not.</param>
            <returns>The first matching method or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindProperty(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Find a property for a given name.
            </summary>
            <param name="type">The type to search in.</param>
            <param name="name">The property name.</param>
            <returns>The first matching property or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindPropertyDeep(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Find a property for a given name recursively (including the passed type's base types).
            </summary>
            <param name="type">The type to search in.</param>
            <param name="name">The property name.</param>
            <returns>The first matching property or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindField(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Find a field for a given name.
            </summary>
            <param name="type">The type to search in.</param>
            <param name="name">The field name.</param>
            <returns>The first matching field or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindFieldDeep(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Find a field for a given name recursively (including the passed type's base types).
            </summary>
            <param name="type">The type to search in.</param>
            <param name="name">The field name.</param>
            <returns>The first matching field or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindEvent(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Find an event for a given name.
            </summary>
            <param name="type">The type to search in.</param>
            <param name="name">The event name.</param>
            <returns>The first matching event or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.FindEventDeep(Mono.Cecil.TypeDefinition,System.String)">
            <summary>
            Find an event for a given name recursively (including the passed type's base types).
            </summary>
            <param name="type">The type to search in.</param>
            <param name="name">The event name.</param>
            <returns>The first matching event or null.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetID(Mono.Cecil.MethodReference,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Get a reference ID that is similar to the full name, but consistent between System.Reflection and Mono.Cecil.
            </summary>
            <param name="method">The method to get the ID for.</param>
            <param name="name">The name to use instead of the reference's own name.</param>
            <param name="type">The ID to use instead of the reference's declaring type ID.</param>
            <param name="withType">Whether the type ID should be included or not. System.Reflection avoids it by default.</param>
            <param name="simple">Whether the ID should be "simple" (name only).</param>
            <returns>The ID.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetID(Mono.Cecil.CallSite)">
            <summary>
            Get a reference ID that is similar to the full name, but consistent between System.Reflection and Mono.Cecil.
            </summary>
            <param name="method">The call site to get the ID for.</param>
            <returns>The ID.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetID(System.Reflection.MethodBase,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Get a reference ID that is similar to the full name, but consistent between System.Reflection and Mono.Cecil.
            </summary>
            <param name="method">The method to get the ID for.</param>
            <param name="name">The name to use instead of the reference's own name.</param>
            <param name="type">The ID to use instead of the reference's declaring type ID.</param>
            <param name="withType">Whether the type ID should be included or not. System.Reflection avoids it by default.</param>
            <param name="proxyMethod">Whether the method is regarded as a proxy method or not. Setting this paramater to true will skip the first parameter.</param>
            <param name="simple">Whether the ID should be "simple" (name only).</param>
            <returns>The ID.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetPatchName(Mono.Cecil.MemberReference)">
            <summary>
            Get the "patch name" - the name of the target to patch - for the given member.
            </summary>
            <param name="mr">The member to get the patch name for.</param>
            <returns>The patch name.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetPatchFullName(Mono.Cecil.MemberReference)">
            <summary>
            Get the "patch name" - the name of the target to patch - for the given member.
            </summary>
            <param name="mr">The member to get the patch name for.</param>
            <returns>The patch name.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Clone(Mono.Cecil.MethodDefinition,Mono.Cecil.MethodDefinition)">
            <summary>
            Clone the given method definition.
            </summary>
            <param name="o">The original method.</param>
            <param name="c">The method definition to apply the cloning process onto, or null to create a new method.</param>
            <returns>A clone of the original method.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Clone(Mono.Cecil.Cil.MethodBody,Mono.Cecil.MethodDefinition)">
            <summary>
            Clone the given method body.
            </summary>
            <param name="bo">The original method body.</param>
            <param name="m">The method which will own the newly cloned method body.</param>
            <returns>A clone of the original method body.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Update(Mono.Cecil.GenericParameter,System.Int32,Mono.Cecil.GenericParameterType)">
            <summary>
            Force-update a generic parameter's position and type.
            </summary>
            <param name="param">The generic parameter to update.</param>
            <param name="position">The new position.</param>
            <param name="type">The new type.</param>
            <returns>The updated generic parameter.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.ResolveGenericParameter(Mono.Cecil.IGenericParameterProvider,Mono.Cecil.GenericParameter)">
            <summary>
            Resolve a given generic parameter in another context.
            </summary>
            <param name="provider">The new context.</param>
            <param name="orig">The original generic parameter.</param>
            <returns>A generic parameter provided by the given context which matches the original generic parameter.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.IMetadataTokenProvider,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given member reference (metadata token provider).
            </summary>
            <param name="mtp">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.TypeReference,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given type reference.
            </summary>
            <param name="type">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.GenericParameterConstraint,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given type reference.
            </summary>
            <param name="constraint">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.MethodReference,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given method reference.
            </summary>
            <param name="method">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.CallSite,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given callsite.
            </summary>
            <param name="method">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.FieldReference,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given field reference.
            </summary>
            <param name="field">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.ParameterDefinition,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given parameter definition.
            </summary>
            <param name="param">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Clone(Mono.Cecil.ParameterDefinition)">
            <summary>
            Clone the given parameter definition.
            </summary>
            <param name="param">The original parameter definition.</param>
            <returns>A clone of the original parameter definition.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.CustomAttribute,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given custom attribute.
            </summary>
            <param name="attrib">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Clone(Mono.Cecil.CustomAttribute)">
            <summary>
            Clone the given custom attribute.
            </summary>
            <param name="attrib">The original custom attribute.</param>
            <returns>A clone of the original custom attribute.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Relink(Mono.Cecil.GenericParameter,MonoMod.Utils.Relinker,Mono.Cecil.IGenericParameterProvider)">
            <summary>
            Relink the given generic parameter reference.
            </summary>
            <param name="param">The reference to relink.</param>
            <param name="relinker">The relinker to use during the relinking process.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.Clone(Mono.Cecil.GenericParameter)">
            <summary>
            Clone the given generic parameter.
            </summary>
            <param name="param">The original generic parameter.</param>
            <returns>A clone of the original generic parameter.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetManagedSize(System.Type)">
            <summary>
            Get the managed size of a given type. This matches an IL-level sizeof(t), even if it cannot be determined normally in C#.
            Note that <c>sizeof(t) != Marshal.SizeOf(t)</c>, f.e. when t is char.
            </summary>
            <remarks>
            An IL-level <c>sizeof(t)</c> will return <c>sizeof(IntPtr)</c> for reference types, as it refers to the size on stack or in an object,
            not the size on heap.
            </remarks>
            <param name="t">The type to get the size from.</param>
            <returns>The managed type size.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetThisParamType(System.Reflection.MethodBase)">
            <summary>
            Get a type which matches what the method should receive via ldarg.0
            </summary>
            <param name="method">The method to obtain the "this" parameter type from.</param>
            <returns>The "this" parameter type.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetLdftnPointer(System.Reflection.MethodBase)">
            <summary>
            Get a native function pointer for a given method. This matches an IL-level ldftn.
            </summary>
            <remarks>
            The result of ldftn doesn't always match that of MethodHandle.GetFunctionPointer().
            For example, ldftn doesn't JIT-compile the method on mono, which thus keeps the class constructor untouched.
            And on .NET, struct overrides (f.e. ToString) have got multiple entry points pointing towards the same code.
            </remarks>
            <param name="m">The method to get a native function pointer for.</param>
            <returns>The native function pointer.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.ToHexadecimalString(System.Byte[])">
            <summary>
            Create a hexadecimal string for the given bytes.
            </summary>
            <param name="data">The input bytes.</param>
            <returns>The output hexadecimal string.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.InvokePassing``1(System.MulticastDelegate,``0,System.Object[])">
            <summary>
            Invokes all delegates in the invocation list, passing on the result to the next.
            </summary>
            <typeparam name="T">Type of the result.</typeparam>
            <param name="md">The multicast delegate.</param>
            <param name="val">The initial value and first parameter.</param>
            <param name="args">Any other arguments that may be passed.</param>
            <returns>The result of all delegates.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.InvokeWhileTrue(System.MulticastDelegate,System.Object[])">
            <summary>
            Invokes all delegates in the invocation list, as long as the previously invoked delegate returns true.
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.InvokeWhileFalse(System.MulticastDelegate,System.Object[])">
            <summary>
            Invokes all delegates in the invocation list, as long as the previously invoked delegate returns false.
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.InvokeWhileNull``1(System.MulticastDelegate,System.Object[])">
            <summary>
            Invokes all delegates in the invocation list, as long as the previously invoked delegate returns null.
            </summary>
        </member>
        <member name="M:MonoMod.Utils.Extensions.SpacedPascalCase(System.String)">
            <summary>
            Split PascalCase words to become Pascal Case instead.
            </summary>
            <param name="input">PascalCaseString</param>
            <returns>Pascal Case String</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.ReadNullTerminatedString(System.IO.BinaryReader)">
            <summary>
            Read the string from the BinaryReader BinaryWriter in a C-friendly format.
            </summary>
            <param name="stream">The input which the method reads from.</param>
            <returns>The output string.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.WriteNullTerminatedString(System.IO.BinaryWriter,System.String)">
            <summary>
            Write the string to the BinaryWriter in a C-friendly format.
            </summary>
            <param name="stream">The output which the method writes to.</param>
            <param name="text">The input string.</param>
        </member>
        <member name="M:MonoMod.Utils.Extensions.CastDelegate``1(System.Delegate)">
            <summary>
            Cast a delegate from one type to another. Compatible with delegates holding an invocation list (combined delegates).
            </summary>
            <param name="source">The input delegate.</param>
            <returns>The output delegate.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.CastDelegate(System.Delegate,System.Type)">
            <summary>
            Cast a delegate from one type to another. Compatible with delegates holding an invocation list (combined delegates).
            </summary>
            <param name="source">The input delegate.</param>
            <param name="type">The wanted output delegate type.</param>
            <returns>The output delegate.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetStateMachineTarget(System.Reflection.MethodInfo)">
            <summary>
            Get the method of interest for a given state machine method.
            </summary>
            <param name="method">The method creating the state machine.</param>
            <returns>The "main" method in the state machine.</returns>
        </member>
        <member name="M:MonoMod.Utils.Extensions.GetActualGenericMethodDefinition(System.Reflection.MethodInfo)">
            <summary>
            Gets the <i>actual</i> generic method definition of a method, as defined on the fully open type.
            </summary>
            <param name="method">The potentially instantiated method to find the definition of.</param>
            <returns>The original method definition, with no generic arguments filled in.</returns>
        </member>
        <member name="T:MonoMod.Utils.Relinker">
            <summary>
            The relinker callback delegate type.
            </summary>
            <param name="mtp">The reference (metadata token provider) to relink.</param>
            <param name="context">The generic context provided to relink generic references.</param>
            <returns>A relinked reference.</returns>
        </member>
        <member name="T:MonoMod.Cil.ILContext">
            <summary>
            An IL manipulation "context" with various helpers and direct access to the MethodBody.
            </summary>
        </member>
        <member name="T:MonoMod.Cil.ILContext.Manipulator">
            <summary>
            The manipulator callback, accepted by the Invoke method.
            </summary>
            <param name="il"></param>
        </member>
        <member name="P:MonoMod.Cil.ILContext.Method">
            <summary>
            The manipulated method.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILContext.IL">
            <summary>
            The manipulated method's IL processor.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILContext.Body">
            <summary>
            The manipulated method body.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILContext.Module">
            <summary>
            The manipulated method's module.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILContext.Instrs">
            <summary>
            The manipulated method instructions.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILContext.Labels">
            <summary>
            A readonly list of all defined labels.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILContext.IsReadOnly">
            <summary>
            Has the context been made read-only? No further method access is possible, but the context has not yet been disposed.
            </summary>
        </member>
        <member name="E:MonoMod.Cil.ILContext.OnDispose">
            <summary>
            Events which run when the context will be disposed.
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILContext.Invoke(MonoMod.Cil.ILContext.Manipulator)">
            <summary>
            Invoke a given manipulator callback.
            </summary>
            <param name="manip">The manipulator to run in this context.</param>
        </member>
        <member name="M:MonoMod.Cil.ILContext.MakeReadOnly">
            <summary>
            Mark this ILContext as read-only and prevent this context from further accessing the originally passed method.
            </summary>
            <remarks>
            If the method is altered prior to calling MakeReadOnly or afterwards by accessing the method directly, the results are undefined.
            </remarks>
        </member>
        <member name="M:MonoMod.Cil.ILContext.Import(System.Reflection.FieldInfo)">
            <summary>
            See <see cref="M:Mono.Cecil.ModuleDefinition.ImportReference(System.Reflection.FieldInfo)"/>
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILContext.Import(System.Reflection.MethodBase)">
            <summary>
            See <see cref="M:Mono.Cecil.ModuleDefinition.ImportReference(System.Reflection.MethodBase)"/>
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILContext.Import(System.Type)">
            <summary>
            See <see cref="M:Mono.Cecil.ModuleDefinition.ImportReference(System.Type)"/>
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILContext.DefineLabel">
            <summary>
            Define a new label to be marked with a cursor.
            </summary>
            <returns>A label without a target instruction.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILContext.DefineLabel(Mono.Cecil.Cil.Instruction)">
            <summary>
            Define a new label pointing at a given instruction.
            </summary>
            <param name="target">The instruction the label will point at.</param>
            <returns>A label pointing at the given instruction.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILContext.IndexOf(Mono.Cecil.Cil.Instruction)">
            <summary>
            Determine the index of a given instruction.
            </summary>
            <param name="instr">The instruction to get the index of.</param>
            <returns>The instruction index, or the end of the method body if it hasn't been found.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILContext.GetIncomingLabels(Mono.Cecil.Cil.Instruction)">
            <summary>
            Obtain all labels pointing at the given instruction.
            </summary>
            <param name="instr">The instruction to get all labels for.</param>
            <returns>All labels targeting the given instruction.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILContext.AddReference``1(``0@)">
            <summary>
            Bind an arbitary object to an ILContext for static retrieval.
            </summary>
            <typeparam name="T">The type of the object. The combination of typeparam and id provides the unique static reference.</typeparam>
            <param name="value">The object to store.</param>
            <returns>The id to use in combination with the typeparam for object retrieval.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILContext.ToString">
            <summary>
            Obtain a string representation of this context (method ID and body).
            </summary>
            <returns>A string representation of this context.</returns>
        </member>
        <member name="T:MonoMod.Cil.MoveType">
            <summary>
            Specifies where a ILCursor should be positioned in relation to the target of a search function
            </summary>
        </member>
        <member name="F:MonoMod.Cil.MoveType.Before">
            <summary>
             Move the cursor before the first instruction in the match
            </summary>
        </member>
        <member name="F:MonoMod.Cil.MoveType.AfterLabel">
            <summary>
            Equivalent to Before with `cursor.MoveAfterLabels()` causing emitted instructions to become the target of incoming labels
            </summary>
        </member>
        <member name="F:MonoMod.Cil.MoveType.After">
            <summary>
             Move the cursor after the last instruction in the match
            </summary>
        </member>
        <member name="T:MonoMod.Cil.SearchTarget">
            <summary>
            Indicates whether the position of a ILCursor is the result of a search function and 
            if the next search should ignore the instruction preceeding or following this cursor.
            <para />
            SearchTarget.Next is the result of searching with MoveType.Before, and SearchTarget.Prev from MoveType.After 
            </summary>
        </member>
        <member name="F:MonoMod.Cil.SearchTarget.Next">
            <summary>
            A foward searching function cannot match the Next instruction and must move the cursor forward
            </summary>
        </member>
        <member name="F:MonoMod.Cil.SearchTarget.Prev">
            <summary>
            A reverse searching function cannot match the Next instruction and must move the cursor backward
            </summary>
        </member>
        <member name="T:MonoMod.Cil.ILCursor">
            <summary>
            A cursor used to manipulate a method body in an ILContext.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Context">
            <summary>
            The context to which this cursor belongs to.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Next">
            <summary>
            The instruction immediately following the cursor position or null if the cursor is at the end of the instruction list.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Prev">
            <summary>
            The instruction immediately preceding the cursor position or null if the cursor is at the start of the instruction list.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Previous">
            <summary>
            The instruction immediately preceding the cursor position or null if the cursor is at the start of the instruction list.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Index">
            <summary>
            The index of the instruction immediately following the cursor position. Range: 0 to <c>Instrs.Count</c>
            Setter accepts negative indexing by adding <c>Instrs.Count</c> to the operand
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.SearchTarget">
            <summary>
            Indicates whether the position of a MMILCursor is the result of a search function and 
            if the next search should ignore the instruction preceeding or following this cursor.
            
            See <see cref="T:MonoMod.Cil.SearchTarget"/>
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.IncomingLabels">
            <summary>
            Enumerates all labels which point to the current instruction (<c>label.Target == Next</c>)
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Method">
            <summary>
            See <see cref="P:MonoMod.Cil.ILContext.Method"/>
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.IL">
            <summary>
            See <see cref="P:MonoMod.Cil.ILContext.IL"/>
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Body">
            <summary>
            See <see cref="P:MonoMod.Cil.ILContext.Body"/>
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Module">
            <summary>
            See <see cref="P:MonoMod.Cil.ILContext.Module"/>
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILCursor.Instrs">
            <summary>
            See <see cref="P:MonoMod.Cil.ILContext.Instrs"/>
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Clone">
            <summary>
            Create a clone of this cursor.
            </summary>
            <returns>The cloned cursor.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.IsBefore(Mono.Cecil.Cil.Instruction)">
            <summary>
            Is this cursor before the given instruction?
            </summary>
            <param name="instr">The instruction to check.</param>
            <returns>True if this cursor is before the given instruction, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.IsAfter(Mono.Cecil.Cil.Instruction)">
            <summary>
            Is this cursor after the given instruction?
            </summary>
            <param name="instr">The instruction to check.</param>
            <returns>True if this cursor is after the given instruction, false otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.ToString">
            <summary>
            Obtain a string representation of this cursor (method ID, index, search target, surrounding instructions).
            </summary>
            <returns>A string representation of this cursor.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Goto(Mono.Cecil.Cil.Instruction,MonoMod.Cil.MoveType,System.Boolean)">
            <summary>
            Move the cursor to a target instruction. All other movements go through this.
            </summary>
            <param name="insn">The target instruction</param>
            <param name="moveType">Where to move in relation to the target instruction and incoming labels (branches)</param>
            <param name="setTarget">Whether to set the `SearchTarget` and skip the target instruction with the next search function</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.MoveAfterLabels">
            <summary>
            Move the cursor after incoming labels (branches). If an instruction is emitted, all labels which currently point to Next, will point to the newly emitted instruction.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.MoveBeforeLabels">
            <summary>
            Move the cursor before incoming labels (branches). This is the default behaviour. Emitted instructions will not cause labels to change targets.
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Goto(System.Int32,MonoMod.Cil.MoveType,System.Boolean)">
            <summary>
            Move the cursor to a target index. Supports negative indexing. See <see cref="M:MonoMod.Cil.ILCursor.Goto(Mono.Cecil.Cil.Instruction,MonoMod.Cil.MoveType,System.Boolean)"/>
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.GotoLabel(MonoMod.Cil.ILLabel,MonoMod.Cil.MoveType,System.Boolean)">
            <summary>
            Overload for <c>Goto(label.Target)</c>. <paramref name="moveType"/> defaults to MoveType.AfterLabel
            </summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.GotoNext(MonoMod.Cil.MoveType,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Search forward and moves the cursor to the next sequence of instructions matching the corresponding predicates. See also <seealso cref="M:MonoMod.Cil.ILCursor.TryGotoNext(MonoMod.Cil.MoveType,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])"/>
            </summary>
            <returns>this</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no match is found</exception>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.TryGotoNext(MonoMod.Cil.MoveType,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Search forward and moves the cursor to the next sequence of instructions matching the corresponding predicates.
            </summary>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.GotoPrev(MonoMod.Cil.MoveType,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Search backward and moves the cursor to the next sequence of instructions matching the corresponding predicates. See also <seealso cref="M:MonoMod.Cil.ILCursor.TryGotoPrev(MonoMod.Cil.MoveType,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])"/>
            </summary>
            <returns>this</returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no match is found</exception>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.TryGotoPrev(MonoMod.Cil.MoveType,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Search backward and moves the cursor to the next sequence of instructions matching the corresponding predicates.
            </summary>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.FindNext(MonoMod.Cil.ILCursor[]@,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Find the next occurences of a series of instructions matching the given set of predicates with gaps permitted.
            </summary>
            <param name="cursors">An array of cursors corresponding to each found instruction (MoveType.Before)</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no match is found</exception>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.TryFindNext(MonoMod.Cil.ILCursor[]@,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Find the next occurences of a series of instructions matching the given set of predicates with gaps permitted.
            </summary>
            <param name="cursors">An array of cursors corresponding to each found instruction (MoveType.Before)</param>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.FindPrev(MonoMod.Cil.ILCursor[]@,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Search backwards for occurences of a series of instructions matching the given set of predicates with gaps permitted.
            </summary>
            <param name="cursors">An array of cursors corresponding to each found instruction (MoveType.Before)</param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If no match is found</exception>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.TryFindPrev(MonoMod.Cil.ILCursor[]@,System.Func{Mono.Cecil.Cil.Instruction,System.Boolean}[])">
            <summary>
            Search backwards for occurences of a series of instructions matching the given set of predicates with gaps permitted.
            </summary>
            <param name="cursors">An array of cursors corresponding to each found instruction (MoveType.Before)</param>
            <returns>True if a match was found</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.MarkLabel(MonoMod.Cil.ILLabel)">
            <summary>
            Set the target of a label to the current position (<c>label.Target = Next</c>) and moves after it.
            </summary>
            <param name="label">The label to mark</param>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.MarkLabel(Mono.Cecil.Cil.Instruction)">
            <summary>
            Create a new label targetting a specific instruction.
            </summary>
            <param name="inst">The instruction to target</param>
            <returns>The created label</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.MarkLabel">
            <summary>
            Create a new label targetting the current position (<c>label.Target = Next</c>) and moves after it.
            </summary>
            <returns>The newly created label</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.DefineLabel">
            <summary>
            Create a new label for use with <see cref="M:MonoMod.Cil.ILCursor.MarkLabel(MonoMod.Cil.ILLabel)"/>
            </summary>
            <returns>A new label with no target</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Remove">
            <summary>
            Remove the Next instruction
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.RemoveRange(System.Int32)">
            <summary>
            Remove several instructions
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor._Retarget(Mono.Cecil.Cil.Instruction,MonoMod.Cil.MoveType)">
            <summary>
            Move the cursor and all labels the cursor is positioned after to a target instruction
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.ParameterDefinition)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="parameter">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.Cil.VariableDefinition)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="variable">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.Cil.Instruction[])">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="targets">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.Cil.Instruction)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="target">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Double)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="value">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Single)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="value">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Int64)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="value">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.SByte)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="value">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Byte)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="value">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.String)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="value">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.FieldReference)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="field">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.CallSite)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="site">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.TypeReference)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="type">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Int32)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="value">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,Mono.Cecil.MethodReference)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="method">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Reflection.FieldInfo)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="field">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Reflection.MethodBase)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="method">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Type)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="type">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit(Mono.Cecil.Cil.OpCode,System.Object)">
            <summary>
            Emit a new instruction at this cursor's current position.
            </summary>
            <param name="opcode">The instruction opcode.</param>
            <param name="operand">The instruction operand.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.Emit``1(Mono.Cecil.Cil.OpCode,System.String)">
            <summary>
            Emit a new instruction at this cursor's current position, accessing a given member.
            </summary>
            <typeparam name="T">The type in which the member is defined.</typeparam>
            <param name="opcode">The instruction opcode.</param>
            <param name="memberName">The accessed member name.</param>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.AddReference``1(``0@)">
            <summary>
            Bind an arbitary object to an ILContext for static retrieval. See <see cref="M:MonoMod.Cil.ILContext.AddReference``1(``0@)"/>
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitGetReference``1(System.Int32)">
            <summary>
            Emit the IL to retrieve a stored reference of type <typeparamref name="T"/> with the given <paramref name="id"/> and place it on the stack.
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitReference``1(``0@)">
            <summary>
            Store an object in the reference store, and emit the IL to retrieve it and place it on the stack.
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitDelegate``1(``0)">
            <summary>
            Emit the IL to invoke a delegate as if it were a method. Stack behaviour matches OpCodes.Call
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitAdd">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Add"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitAddOvf">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Add_Ovf"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitAddOvfUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Add_Ovf_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitAnd">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.And"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitArglist">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Arglist"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBeq(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Beq"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBeq(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Beq"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBge(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bge"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBge(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bge"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBgeUn(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bge_Un"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBgeUn(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bge_Un"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBgt(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBgt(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBgtUn(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt_Un"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBgtUn(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt_Un"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBle(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ble"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBle(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ble"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBleUn(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ble_Un"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBleUn(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ble_Un"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBlt(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Blt"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBlt(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Blt"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBltUn(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Blt_Un"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBltUn(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Blt_Un"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBneUn(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bne_Un"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBneUn(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Bne_Un"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBox(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Box"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBox(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Box"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBr(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Br"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBr(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Br"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBreak">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Break"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBrfalse(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Brfalse"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBrfalse(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Brfalse"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBrtrue(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Brtrue"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitBrtrue(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Brtrue"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCall(Mono.Cecil.MethodReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> opcode with a <see cref="T:MethodReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCall(System.Reflection.MethodBase)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> opcode with a <see cref="T:MethodBase"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:MethodReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCalli(Mono.Cecil.IMethodSignature)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Calli"/> opcode with a <see cref="T:IMethodSignature"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCallvirt(Mono.Cecil.MethodReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/> opcode with a <see cref="T:MethodReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCallvirt(System.Reflection.MethodBase)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/> opcode with a <see cref="T:MethodBase"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:MethodReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCastclass(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Castclass"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCastclass(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Castclass"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCeq">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ceq"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCgt">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Cgt"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCgtUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Cgt_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCkfinite">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ckfinite"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitClt">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Clt"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCltUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Clt_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConstrained(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Constrained"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConstrained(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Constrained"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvI">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvI1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvI2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvI4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvI8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfIUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI1Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I1_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI2Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I2_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI4Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I4_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfI8Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I8_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfUUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU1Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U1_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU2Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U2_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU4Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U4_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvOvfU8Un">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U8_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvRUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_R_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvR4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_R4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvR8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_R8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvU">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvU1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvU2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvU4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitConvU8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCpblk">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Cpblk"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCpobj(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Cpobj"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitCpobj(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Cpobj"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitDiv">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Div"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitDivUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Div_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitDup">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Dup"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitEndfilter">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Endfilter"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitEndfinally">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Endfinally"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitInitblk">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Initblk"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitInitobj(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitInitobj(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitIsinst(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Isinst"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitIsinst(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Isinst"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitJmp(Mono.Cecil.MethodReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/> opcode with a <see cref="T:MethodReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitJmp(System.Reflection.MethodBase)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/> opcode with a <see cref="T:MethodBase"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:MethodReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarg0">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_0"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarg1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarg2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarg3">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_3"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarg(System.Int32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg"/> opcode with a <see cref="T:int"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarg(System.UInt32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg"/> opcode with a <see cref="T:uint"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:int" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarg(Mono.Cecil.ParameterReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg"/> opcode with a <see cref="T:ParameterReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarga(System.Int32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarga"/> opcode with a <see cref="T:int"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarga(System.UInt32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarga"/> opcode with a <see cref="T:uint"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:int" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdarga(Mono.Cecil.ParameterReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarga"/> opcode with a <see cref="T:ParameterReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdcI4(System.Int32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I4"/> opcode with a <see cref="T:int"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdcI4(System.UInt32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I4"/> opcode with a <see cref="T:uint"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:int" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdcI8(System.Int64)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I8"/> opcode with a <see cref="T:long"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdcI8(System.UInt64)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I8"/> opcode with a <see cref="T:ulong"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:long" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdcR4(System.Single)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_R4"/> opcode with a <see cref="T:float"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdcR8(System.Double)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_R8"/> opcode with a <see cref="T:double"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemAny(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Any"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemAny(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Any"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemI">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemI1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemI2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemI4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemI8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemR4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_R4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemR8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_R8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemRef">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Ref"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemU1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_U1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemU2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_U2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelemU4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_U4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelema(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelema"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdelema(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelema"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdfld(Mono.Cecil.FieldReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/> opcode with a <see cref="T:FieldReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdfld(System.Reflection.FieldInfo)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/> opcode with a <see cref="T:FieldInfo"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:FieldReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdflda(Mono.Cecil.FieldReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/> opcode with a <see cref="T:FieldReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdflda(System.Reflection.FieldInfo)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/> opcode with a <see cref="T:FieldInfo"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:FieldReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdftn(Mono.Cecil.MethodReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/> opcode with a <see cref="T:MethodReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdftn(System.Reflection.MethodBase)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/> opcode with a <see cref="T:MethodBase"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:MethodReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindI">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindI1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindI2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindI4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindI8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindR4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_R4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindR8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_R8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindRef">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_Ref"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindU1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_U1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindU2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_U2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdindU4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_U4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdlen">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldlen"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloc0">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_0"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloc1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloc2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloc3">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_3"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloc(System.Int32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc"/> opcode with a <see cref="T:int"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloc(System.UInt32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc"/> opcode with a <see cref="T:uint"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:int" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloc(Mono.Cecil.Cil.VariableReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc"/> opcode with a <see cref="T:VariableReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloca(System.Int32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloca"/> opcode with a <see cref="T:int"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloca(System.UInt32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloca"/> opcode with a <see cref="T:uint"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:int" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdloca(Mono.Cecil.Cil.VariableReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloca"/> opcode with a <see cref="T:VariableReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdnull">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldnull"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdobj(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldobj"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdobj(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldobj"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdsfld(Mono.Cecil.FieldReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/> opcode with a <see cref="T:FieldReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdsfld(System.Reflection.FieldInfo)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/> opcode with a <see cref="T:FieldInfo"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:FieldReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdsflda(Mono.Cecil.FieldReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/> opcode with a <see cref="T:FieldReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdsflda(System.Reflection.FieldInfo)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/> opcode with a <see cref="T:FieldInfo"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:FieldReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdstr(System.String)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldstr"/> opcode with a <see cref="T:string"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdtoken(Mono.Cecil.IMetadataTokenProvider)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/> opcode with a <see cref="T:IMetadataTokenProvider"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdtoken(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:IMetadataTokenProvider" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdtoken(System.Reflection.FieldInfo)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/> opcode with a <see cref="T:FieldInfo"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:IMetadataTokenProvider" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdtoken(System.Reflection.MethodBase)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/> opcode with a <see cref="T:MethodBase"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:IMetadataTokenProvider" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdvirtftn(Mono.Cecil.MethodReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/> opcode with a <see cref="T:MethodReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLdvirtftn(System.Reflection.MethodBase)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/> opcode with a <see cref="T:MethodBase"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:MethodReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLeave(MonoMod.Cil.ILLabel)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Leave"/> opcode with a <see cref="T:ILLabel"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLeave(Mono.Cecil.Cil.Instruction)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Leave"/> opcode with a <see cref="T:Instruction"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitLocalloc">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Localloc"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitMkrefany(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Mkrefany"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitMkrefany(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Mkrefany"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitMul">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Mul"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitMulOvf">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Mul_Ovf"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitMulOvfUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Mul_Ovf_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitNeg">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Neg"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitNewarr(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Newarr"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitNewarr(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Newarr"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitNewobj(Mono.Cecil.MethodReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/> opcode with a <see cref="T:MethodReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitNewobj(System.Reflection.MethodBase)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/> opcode with a <see cref="T:MethodBase"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:MethodReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitNop">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Nop"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitNot">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Not"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitOr">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Or"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitPop">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Pop"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitReadonly">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Readonly"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitRefanytype">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Refanytype"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitRefanyval(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Refanyval"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitRefanyval(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Refanyval"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitRem">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Rem"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitRemUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Rem_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitRet">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Ret"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitRethrow">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Rethrow"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitShl">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Shl"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitShr">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Shr"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitShrUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Shr_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitSizeof(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Sizeof"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitSizeof(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Sizeof"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStarg(System.Int32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Starg"/> opcode with a <see cref="T:int"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStarg(System.UInt32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Starg"/> opcode with a <see cref="T:uint"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:int" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStarg(Mono.Cecil.ParameterReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Starg"/> opcode with a <see cref="T:ParameterReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemAny(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Any"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemAny(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Any"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemI">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemI1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemI2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemI4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemI8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemR4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_R4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemR8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_R8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStelemRef">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Ref"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStfld(Mono.Cecil.FieldReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/> opcode with a <see cref="T:FieldReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStfld(System.Reflection.FieldInfo)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/> opcode with a <see cref="T:FieldInfo"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:FieldReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindI">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindI1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindI2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindI4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindI8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindR4">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_R4"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindR8">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_R8"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStindRef">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_Ref"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStloc0">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_0"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStloc1">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_1"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStloc2">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_2"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStloc3">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_3"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStloc(System.Int32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc"/> opcode with a <see cref="T:int"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStloc(System.UInt32)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc"/> opcode with a <see cref="T:uint"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:int" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStloc(Mono.Cecil.Cil.VariableReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc"/> opcode with a <see cref="T:VariableReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStobj(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stobj"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStobj(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stobj"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStsfld(Mono.Cecil.FieldReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/> opcode with a <see cref="T:FieldReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitStsfld(System.Reflection.FieldInfo)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/> opcode with a <see cref="T:FieldInfo"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:FieldReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitSub">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Sub"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitSubOvf">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Sub_Ovf"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitSubOvfUn">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Sub_Ovf_Un"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitSwitch(MonoMod.Cil.ILLabel[])">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Switch"/> opcode with a <see cref="T:ILLabel[]"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitSwitch(Mono.Cecil.Cil.Instruction[])">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Switch"/> opcode with a <see cref="T:Instruction[]"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:ILLabel[]" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitTail">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Tail"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitThrow">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Throw"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitUnaligned(System.Byte)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Unaligned"/> opcode with a <see cref="T:byte"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitUnbox(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitUnbox(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitUnboxAny(Mono.Cecil.TypeReference)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox_Any"/> opcode with a <see cref="T:TypeReference"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitUnboxAny(System.Type)">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox_Any"/> opcode with a <see cref="T:Type"/> operand to the current cursor position.</summary>
            <param name="operand">The emitted instruction's operand. Will be automatically converted to a <see cref="T:TypeReference" />.</param>
            <returns><see langword="this"/></returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitVolatile">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Volatile"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="M:MonoMod.Cil.ILCursor.EmitXor">
            <summary>Emits a <see cref="F:Mono.Cecil.Cil.OpCodes.Xor"/> opcode to the current cursor position.</summary>
            <returns>this</returns>
        </member>
        <member name="T:MonoMod.Cil.ILLabel">
            <summary>
            A label to be used in ILContexts.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILLabel.Target">
            <summary>
            The target instruction this label points at.
            </summary>
        </member>
        <member name="P:MonoMod.Cil.ILLabel.Branches">
            <summary>
            All instructions using this label.
            </summary>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.Match(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.OpCode)">
            <summary>Matches an instruction with the given opcode</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="opcode">The instruction opcode to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.Match``1(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.OpCode,``0)">
            <summary>Matches an instruction with the given opcode</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="opcode">The instruction opcode to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.Match``1(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.OpCode,``0@)">
            <summary>Matches an instruction with the given opcode</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="opcode">The instruction opcode to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLeaveS(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Leave_S"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLeaveS(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Leave_S"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarg(Mono.Cecil.Cil.Instruction,System.Int32@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStarg(Mono.Cecil.Cil.Instruction,System.Int32@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Starg"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarga(Mono.Cecil.Cil.Instruction,System.Int32@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarga"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloc(Mono.Cecil.Cil.Instruction,System.Int32@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStloc(Mono.Cecil.Cil.Instruction,System.Int32@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloca(Mono.Cecil.Cil.Instruction,System.Int32@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloca"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcI4(Mono.Cecil.Cil.Instruction,System.Int32@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallOrCallvirt(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> or <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchAdd(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Add"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchAddOvf(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Add_Ovf"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchAddOvfUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Add_Ovf_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchAnd(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.And"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchArglist(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Arglist"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBeq(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Beq"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBeq(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Beq"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBeq(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Beq"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBge(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bge"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBge(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bge"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBge(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bge"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgeUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bge_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgeUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bge_Un"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgeUn(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bge_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgt(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgt(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgt(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgtUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgtUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt_Un"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBgtUn(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bgt_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBle(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ble"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBle(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ble"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBle(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ble"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBleUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ble_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBleUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ble_Un"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBleUn(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ble_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBlt(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Blt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBlt(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Blt"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBlt(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Blt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBltUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Blt_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBltUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Blt_Un"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBltUn(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Blt_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBneUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bne_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBneUn(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bne_Un"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBneUn(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Bne_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBox(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Box"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBox(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Box"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBox(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Box"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBox``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Box"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBox(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Box"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBr(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Br"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBr(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Br"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBr(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Br"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBreak(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Break"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBrfalse(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Brfalse"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBrfalse(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Brfalse"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBrfalse(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Brfalse"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBrtrue(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Brtrue"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBrtrue(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Brtrue"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchBrtrue(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Brtrue"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCall(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCall(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCall(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCall(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCall``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCall(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCalli(Mono.Cecil.Cil.Instruction,Mono.Cecil.IMethodSignature@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Calli"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCalli(Mono.Cecil.Cil.Instruction,Mono.Cecil.IMethodSignature)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Calli"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallvirt(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallvirt(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallvirt(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallvirt(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallvirt``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallvirt(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallOrCallvirt(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> or <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallOrCallvirt(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> or <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallOrCallvirt(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> or <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallOrCallvirt``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> or <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCallOrCallvirt(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Call"/> or <see cref="F:Mono.Cecil.Cil.OpCodes.Callvirt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCastclass(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Castclass"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCastclass(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Castclass"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCastclass(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Castclass"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCastclass``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Castclass"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCastclass(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Castclass"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCeq(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ceq"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCgt(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cgt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCgtUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cgt_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCkfinite(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ckfinite"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchClt(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Clt"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCltUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Clt_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConstrained(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Constrained"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConstrained(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Constrained"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConstrained(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Constrained"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConstrained``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Constrained"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConstrained(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Constrained"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvI(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvI1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvI2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvI4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvI8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfIUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI1Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I1_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI2Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I2_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI4Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I4_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfI8Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_I8_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfUUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU1Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U1_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU2Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U2_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU4Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U4_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvOvfU8Un(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_Ovf_U8_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvRUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_R_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvR4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_R4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvR8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_R8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvU(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvU1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvU2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvU4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchConvU8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Conv_U8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCpblk(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cpblk"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCpobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cpobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCpobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cpobj"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCpobj(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cpobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCpobj``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cpobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchCpobj(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Cpobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchDiv(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Div"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchDivUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Div_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchDup(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Dup"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchEndfilter(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Endfilter"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchEndfinally(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Endfinally"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchInitblk(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Initblk"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchInitobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchInitobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchInitobj(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchInitobj``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchInitobj(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Initobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchIsinst(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Isinst"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchIsinst(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Isinst"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchIsinst(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Isinst"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchIsinst``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Isinst"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchIsinst(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Isinst"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchJmp(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchJmp(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchJmp(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchJmp(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchJmp``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchJmp(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Jmp"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarg0(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_0"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarg1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarg2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarg3(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg_3"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarg(Mono.Cecil.Cil.Instruction,System.Int32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarg(Mono.Cecil.Cil.Instruction,System.UInt32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarg"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarga(Mono.Cecil.Cil.Instruction,System.Int32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarga"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdarga(Mono.Cecil.Cil.Instruction,System.UInt32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldarga"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcI4(Mono.Cecil.Cil.Instruction,System.Int32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I4"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcI4(Mono.Cecil.Cil.Instruction,System.UInt32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcI8(Mono.Cecil.Cil.Instruction,System.Int64@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcI8(Mono.Cecil.Cil.Instruction,System.Int64)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I8"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcI8(Mono.Cecil.Cil.Instruction,System.UInt64)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcR4(Mono.Cecil.Cil.Instruction,System.Single@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_R4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcR4(Mono.Cecil.Cil.Instruction,System.Single)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_R4"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcR8(Mono.Cecil.Cil.Instruction,System.Double@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_R8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdcR8(Mono.Cecil.Cil.Instruction,System.Double)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldc_R8"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemAny(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemAny(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Any"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemAny(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemAny``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemAny(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemI(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemI1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemI2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemI4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemI8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemR4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_R4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemR8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_R8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemRef(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_Ref"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemU1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_U1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemU2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_U2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelemU4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelem_U4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelema(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelema"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelema(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelema"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelema(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelema"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelema``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelema"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdelema(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldelema"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdfld(Mono.Cecil.Cil.Instruction,System.Reflection.FieldInfo)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdfld(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdfld``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdfld(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdflda(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdflda(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdflda(Mono.Cecil.Cil.Instruction,System.Reflection.FieldInfo)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdflda(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdflda``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdflda(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdftn(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdftn(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdftn(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdftn(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdftn``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdftn(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindI(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindI1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindI2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindI4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindI8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindR4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_R4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindR8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_R8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindRef(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_Ref"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindU1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_U1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindU2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_U2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdindU4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldind_U4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdlen(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldlen"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloc0(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_0"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloc1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloc2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloc3(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc_3"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloc(Mono.Cecil.Cil.Instruction,System.Int32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloc(Mono.Cecil.Cil.Instruction,System.UInt32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloc"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloca(Mono.Cecil.Cil.Instruction,System.Int32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloca"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdloca(Mono.Cecil.Cil.Instruction,System.UInt32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldloca"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdnull(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldnull"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldobj"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdobj(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdobj``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdobj(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsfld(Mono.Cecil.Cil.Instruction,System.Reflection.FieldInfo)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsfld(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsfld``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsfld(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsflda(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsflda(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsflda(Mono.Cecil.Cil.Instruction,System.Reflection.FieldInfo)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsflda(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsflda``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdsflda(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldsflda"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdstr(Mono.Cecil.Cil.Instruction,System.String@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldstr"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdstr(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldstr"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdtoken(Mono.Cecil.Cil.Instruction,Mono.Cecil.IMetadataTokenProvider@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdtoken(Mono.Cecil.Cil.Instruction,Mono.Cecil.IMetadataTokenProvider)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdtoken(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdtoken``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdtoken(Mono.Cecil.Cil.Instruction,System.Reflection.FieldInfo)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdtoken(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldtoken"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdvirtftn(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdvirtftn(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdvirtftn(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdvirtftn(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdvirtftn``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLdvirtftn(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ldvirtftn"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLeave(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Leave"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLeave(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Leave"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLeave(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Leave"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchLocalloc(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Localloc"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMkrefany(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mkrefany"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMkrefany(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mkrefany"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMkrefany(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mkrefany"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMkrefany``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mkrefany"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMkrefany(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mkrefany"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMul(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mul"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMulOvf(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mul_Ovf"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchMulOvfUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Mul_Ovf_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNeg(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Neg"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewarr(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newarr"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewarr(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newarr"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewarr(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newarr"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewarr``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newarr"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewarr(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newarr"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.MethodReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj(Mono.Cecil.Cil.Instruction,System.Reflection.MethodBase)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNewobj(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Newobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNop(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Nop"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchNot(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Not"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchOr(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Or"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchPop(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Pop"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchReadonly(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Readonly"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRefanytype(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Refanytype"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRefanyval(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Refanyval"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRefanyval(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Refanyval"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRefanyval(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Refanyval"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRefanyval``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Refanyval"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRefanyval(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Refanyval"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRem(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Rem"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRemUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Rem_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRet(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Ret"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchRethrow(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Rethrow"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchShl(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Shl"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchShr(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Shr"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchShrUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Shr_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSizeof(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sizeof"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSizeof(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sizeof"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSizeof(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sizeof"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSizeof``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sizeof"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSizeof(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sizeof"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStarg(Mono.Cecil.Cil.Instruction,System.Int32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Starg"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStarg(Mono.Cecil.Cil.Instruction,System.UInt32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Starg"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemAny(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemAny(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Any"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemAny(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemAny``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemAny(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemI(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemI1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemI2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemI4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemI8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemR4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_R4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemR8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_R8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStelemRef(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stelem_Ref"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStfld(Mono.Cecil.Cil.Instruction,System.Reflection.FieldInfo)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStfld(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStfld``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStfld(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindI(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindI1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindI2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindI4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindI8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_I8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindR4(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_R4"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindR8(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_R8"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStindRef(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stind_Ref"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStloc0(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_0"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStloc1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_1"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStloc2(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_2"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStloc3(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc_3"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStloc(Mono.Cecil.Cil.Instruction,System.Int32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStloc(Mono.Cecil.Cil.Instruction,System.UInt32)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stloc"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStobj(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stobj"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStobj(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStobj``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStobj(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stobj"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStsfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStsfld(Mono.Cecil.Cil.Instruction,Mono.Cecil.FieldReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStsfld(Mono.Cecil.Cil.Instruction,System.Reflection.FieldInfo)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStsfld(Mono.Cecil.Cil.Instruction,System.Type,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="type">The type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStsfld``1(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <typeparam name="T">The type the operand member must be defined on for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchStsfld(Mono.Cecil.Cil.Instruction,System.String,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Stsfld"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type the operand member must be defined on for the instruction to match.</param>
            <param name="name">The name that the operand member must have for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSub(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sub"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSubOvf(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sub_Ovf"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSubOvfUn(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Sub_Ovf_Un"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSwitch(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel[]@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Switch"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSwitch(Mono.Cecil.Cil.Instruction,MonoMod.Cil.ILLabel[])">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Switch"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchSwitch(Mono.Cecil.Cil.Instruction,Mono.Cecil.Cil.Instruction[])">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Switch"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchTail(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Tail"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchThrow(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Throw"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnaligned(Mono.Cecil.Cil.Instruction,System.Byte@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unaligned"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnaligned(Mono.Cecil.Cil.Instruction,System.Byte)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unaligned"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnbox(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnbox(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnbox(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnbox``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnbox(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnboxAny(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference@)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value of the instruction.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnboxAny(Mono.Cecil.Cil.Instruction,Mono.Cecil.TypeReference)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox_Any"/> .</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnboxAny(Mono.Cecil.Cil.Instruction,System.Type)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="value">The operand value required for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnboxAny``1(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <typeparam name="T">The type that must be the instruction operand for the instruction to match.</typeparam>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchUnboxAny(Mono.Cecil.Cil.Instruction,System.String)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Unbox_Any"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <param name="typeFullName">The full name of the type that must be the instruction operand for the instruction to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchVolatile(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Volatile"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:MonoMod.Cil.ILPatternMatchingExt.MatchXor(Mono.Cecil.Cil.Instruction)">
            <summary>Matches an instruction with opcode <see cref="F:Mono.Cecil.Cil.OpCodes.Xor"/>.</summary>
            <param name="instr">The instruction to try to match.</param>
            <returns><see langword="true"/> if the instruction matches; <see langword="false"/> otherwise.</returns>
        </member>
        <member name="F:MonoMod.Logs.DebugLogInterpolatedStringHandler.MinimumArrayPoolLength">
            <summary>Minimum size array to rent from the pool.</summary>
            <remarks>Same as stack-allocation size used today by string.Format.</remarks>
        </member>
        <member name="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._arrayToReturnToPool">
            <summary>Array rented from the array pool and used to back <see cref="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._chars"/>.</summary>
        </member>
        <member name="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._chars">
            <summary>The span to write into.</summary>
        </member>
        <member name="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._pos">
            <summary>Position at which to write the next character.</summary>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.Clear">
            <summary>Clears the handler, returning any rented array to the pool.</summary>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.AppendOrInsertAlignmentIfNeeded(System.Int32,System.Int32)">
            <summary>Handles adding any padding required for aligning a formatted value in an interpolation expression.</summary>
            <param name="startingPos">The position at which the written value started.</param>
            <param name="alignment">Non-zero minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.EnsureCapacityForAdditionalChars(System.Int32)">
            <summary>Ensures <see cref="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._chars"/> has the capacity to store <paramref name="additionalChars"/> beyond <see cref="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._pos"/>.</summary>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.GrowThenCopyString(System.String)">
            <summary>Fallback for fast path in <see cref="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.AppendStringDirect(System.String)"/> when there's not enough space in the destination.</summary>
            <param name="value">The string to write.</param>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.GrowThenCopySpan(System.ReadOnlySpan{System.Char})">
            <summary>Fallback for <see cref="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.AppendFormatted(System.ReadOnlySpan{System.Char})"/> for when not enough space exists in the current buffer.</summary>
            <param name="value">The span to write.</param>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.Grow(System.Int32)">
            <summary>Grows <see cref="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._chars"/> to have the capacity to store at least <paramref name="additionalChars"/> beyond <see cref="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._pos"/>.</summary>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.Grow">
            <summary>Grows the size of <see cref="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._chars"/>.</summary>
        </member>
        <member name="M:MonoMod.Logs.DebugLogInterpolatedStringHandler.GrowCore(System.UInt32)">
            <summary>Grow the size of <see cref="F:MonoMod.Logs.DebugLogInterpolatedStringHandler._chars"/> to at least the specified <paramref name="requiredMinCapacity"/>.</summary>
        </member>
        <member name="M:MonoMod.Logs.FormatIntoInterpolatedStringHandler.AppendOrInsertAlignmentIfNeeded(System.Int32,System.Int32)">
            <summary>Handles adding any padding required for aligning a formatted value in an interpolation expression.</summary>
            <param name="startingPos">The position at which the written value started.</param>
            <param name="alignment">Non-zero minimum number of characters that should be written for this value.  If the value is negative, it indicates left-aligned and the required minimum is the absolute value.</param>
        </member>
        <member name="F:MonoMod.Switches.RunningOnWine">
            <summary>
            Boolean. Forces <see cref="T:MonoMod.Utils.PlatformDetection"/> to detect that Windows is Wine.
            </summary>
        </member>
        <member name="F:MonoMod.Switches.DebugClr">
            <summary>
            Boolean. Tells MonoMod that it is running on a Debug or Checked build of CoreCLR.
            </summary>
            <remarks>
            MonoMod.Core, in its CoreCLR implementation, pokes into certain internal CLR datastructures. Some of these
            have a different layout in Release builds than in Debug or Checked builds, so MonoMod needs to know which
            type of build it is running on, and that is not detectable. MonoMod assumes Release builds by default,
            because that is the most common configuration.
            </remarks>
        </member>
        <member name="F:MonoMod.Switches.JitPath">
            <summary>
            String. Full path to the ClrJIT binary used by the current runtime.
            </summary>
            <remarks>
            <para>MonoMod.Core, in its CoreCLR implementation, implements JIT hooks to track method recompilations. To do this,
            it needs to find the runtime's ClrJIT binary. By default, it looks for the first loaded module with an extensionless
            name ending with <c>clrjit</c>, however in certain circumstances, such as if .NET Framework 4.8 and .NET Core are
            loaded together into the same process, this process can get the wrong module. This value overrides the default
            behavior.</para>
            <para>This path must still meet the above criteria, and must be the full path of the binary. If it doesn't match
            the above criteria, a warning will be printed and this will be ignored. If the specified path is not loaded, this
            is also ignored, and the default behavior is used.</para>
            </remarks>
        </member>
        <member name="F:MonoMod.Switches.LogRecordHoles">
            <summary>
            Boolean. Forces the logger to always record the value of message holes.
            </summary>
        </member>
        <member name="F:MonoMod.Switches.LogInMemory">
            <summary>
            Boolean. Enables the in-memory logger.
            </summary>
        </member>
        <member name="F:MonoMod.Switches.LogSpam">
            <summary>
            Boolean. Enables the logging of <see cref="F:MonoMod.Logs.LogLevel.Spam"/> messages to default sinks (file and memory).
            </summary>
        </member>
        <member name="F:MonoMod.Switches.LogReplayQueueLength">
            <summary>
            Integer. Sets the length of the logger's replay queue, in log messages. If the value is zero (the default), the
            replay queue is disabled.
            </summary>
        </member>
        <member name="F:MonoMod.Switches.LogToFile">
            <summary>
            String. Enables the file sink of the logger. Contains the name of the log file to write. <c>-</c> indicates
            standard out.
            </summary>
        </member>
        <member name="F:MonoMod.Switches.LogToFileFilter">
            <summary>
            String. Provides a comma or semicolon separated list of sources to write to disk. If empty, all soruces are
            written. Sources are typically the MonoMod assembly name (e.g. <c>MonoMod.Utils</c> or <c>MonoMod.RuntimeDetour</c>).
            </summary>
        </member>
        <member name="F:MonoMod.Switches.DMDType">
            <summary>
            String. Specifies the backend to use for <see cref="T:MonoMod.Utils.DynamicMethodDefinition"/>s. Refer to <c>docs/Switches.md</c> for
            details.
            </summary>
        </member>
        <member name="F:MonoMod.Switches.DMDDebug">
            <summary>
            Boolean. Specifies the default value for <see cref="P:MonoMod.Utils.DynamicMethodDefinition.Debug"/>. Refer to <c>docs/Switches.md</c>
            for details.
            </summary>
        </member>
        <member name="F:MonoMod.Switches.DMDDumpTo">
            <summary>
            String. Specifies the directory to dump <see cref="T:MonoMod.Utils.DynamicMethodDefinition"/>s to for debugging. Refer to
            <c>docs/Switches.md</c> for details.
            </summary>
        </member>
        <member name="M:MonoMod.Switches.SetSwitchValue(System.String,System.Object)">
            <summary>
            Sets the value associated with a switch.
            </summary>
            <param name="switch">The switch to set the value of.</param>
            <param name="value">The value of the switch.</param>
        </member>
        <member name="M:MonoMod.Switches.ClearSwitchValue(System.String)">
            <summary>
            Clears the specified switch.
            </summary>
            <remarks>
            The primary use of this method is to enable switch lookups to fall back to reading <see cref="T:System.AppContext"/>, if
            that is available on the current platform.
            </remarks>
            <param name="switch">The switch to clear.</param>
        </member>
    </members>
</doc>
